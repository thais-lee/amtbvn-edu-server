generator client {
  provider = "prisma-client-js"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum ERole {
  ADMIN
  USER
  MINISTRY
  TEACHER
}

enum EGender {
  MALE
  FEMALE
  OTHER
}

model User {
  id                 Int           @id @default(autoincrement())
  firstName          String        @db.VarChar(50)
  lastName           String?       @db.VarChar(50)
  gender             EGender?
  dateOfBirth        DateTime?
  avatarImageFileId  String?
  avatarImageFileUrl String?
  phoneNumber        String?       @db.VarChar(15)
  roles              ERole[]       @default([USER])
  userLogin          UserLogin?
  sessions           UserSession[]
  articles           Articles[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserLogin {
  userId               Int       @id
  user                 User      @relation(fields: [userId], references: [id])
  username             String?
  email                String    @db.VarChar(255)
  isEmailVerified      Boolean   @default(false)
  emailVerifyToken     String?
  emailVerifyTokenAt   DateTime?
  password             String
  passwordResetToken   String?
  passwordResetTokenAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSession {
  id           String   @id @default(uuid())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  refreshToken String
  expiredAt    DateTime
  userAgent    String?
  userIp       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Categories {
  id             Int          @id @default(autoincrement())
  name           String
  parentId       Int?
  parentCategory Categories?  @relation("CategoriesToCategories", fields: [parentId], references: [id])
  subCategories  Categories[] @relation("CategoriesToCategories")
  articles       Articles[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
}

model Articles {
  id         Int           @id @default(autoincrement())
  title      String
  content    String
  categoryId Int
  category   Categories    @relation(fields: [categoryId], references: [id])
  status     ArticleStatus @default(DRAFT)
  likeCount  Int           @default(0)
  viewCount  Int           @default(0)
  updatedAt  DateTime      @updatedAt
  createdAt  DateTime      @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id])
}
