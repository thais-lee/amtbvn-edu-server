generator client {
  provider = "prisma-client-js"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum ERole {
  ADMIN
  USER
  MINISTRY
  TEACHER
}

enum EGender {
  MALE
  FEMALE
  OTHER
}

model User {
  id                 Int       @id @default(autoincrement())
  firstName          String    @db.VarChar(50)
  lastName           String?   @db.VarChar(50)
  gender             EGender?
  dateOfBirth        DateTime?
  avatarImageFileId  String?
  avatarImageFileUrl String?
  phoneNumber        String?   @db.VarChar(15)
  roles              ERole[]   @default([USER])

  userLogin      UserLogin?
  sessions       UserSession[]
  articles       Articles[]
  files          File[]
  lessonProgress LessonProgress[]
  enrollments    Enrollment[]
  members        CourseMember[]
  studentAnswers StudentAnswer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserLogin {
  userId               Int       @id
  user                 User      @relation(fields: [userId], references: [id])
  username             String?
  email                String    @db.VarChar(255)
  isEmailVerified      Boolean   @default(false)
  emailVerifyToken     String?
  emailVerifyTokenAt   DateTime?
  password             String
  passwordResetToken   String?
  passwordResetTokenAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSession {
  id           String   @id @default(uuid())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  refreshToken String
  expiredAt    DateTime
  userAgent    String?
  userIp       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Categories {
  id             Int          @id @default(autoincrement())
  name           String
  parentId       Int?
  parentCategory Categories?  @relation("CategoriesToCategories", fields: [parentId], references: [id])
  subCategories  Categories[] @relation("CategoriesToCategories")
  articles       Articles[]
  courses        Course[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
}

model Articles {
  id         Int           @id @default(autoincrement())
  title      String
  content    String
  categoryId Int
  category   Categories    @relation(fields: [categoryId], references: [id])
  type       ArticlesType  @default(BULLETIN)
  status     ArticleStatus @default(DRAFT)
  likeCount  Int           @default(0)
  viewCount  Int           @default(0)
  updatedAt  DateTime      @updatedAt
  createdAt  DateTime      @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

enum ArticlesType {
  KNOWLEDGE
  FAQ
  BULLETIN
}

model File {
  id          Int      @id @default(autoincrement())
  fileName    String
  description String?
  storagePath String
  mimeType    String
  size        Int
  uploadedBy  Int
  user        User     @relation(fields: [uploadedBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  file FileRelation?
}

model FileRelation {
  id       Int          @id @default(autoincrement())
  file     File         @relation(fields: [fileId], references: [id])
  fileId   Int          @unique
  itemType FileItemType
  itemId   Int

  @@unique([fileId, itemType])
}

enum FileItemType {
  ARTICLE
  COURSE
  LESSON
  TEST
  HOMEWORK
}

enum CourseStatus {
  PUBLIC
  PRIVATE
}

model Course {
  id            Int          @id @default(autoincrement())
  name          String
  description   String?
  imageFileUrl  String?
  bannerFileUrl String?
  categoryId    Int
  category      Categories   @relation(fields: [categoryId], references: [id])
  status        CourseStatus @default(PUBLIC)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  lessons     Lesson[]       @relation()
  courseItems CourseItem[]
  enrollments Enrollment[]
  members     CourseMember[]
}

model CourseItem {
  id Int @id @default(autoincrement())

  courseId       Int
  course         Course   @relation(fields: [courseId], references: [id])
  content        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  fileRelationId Int?
}

model Lesson {
  id          Int          @id @default(autoincrement())
  title       String
  content     String
  isImportant Boolean      @default(false)
  status      LessonStatus @default(DRAFT)
  courseId    Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  previousId  Int?         @unique

  previous       Lesson?          @relation(fields: [previousId], references: [id], name: "LessonToLesson")
  next           Lesson?          @relation("LessonToLesson")
  course         Course           @relation(fields: [courseId], references: [id])
  lessonItems    LessonItem[]
  lessonProgress LessonProgress[]
  exercises      LessonExercise[]
}

enum LessonStatus {
  DRAFT
  PUBLISHED
}

enum LessonItemType {
  TEXT
  VIDEO
  PDF
  EXERCISE
}

model LessonItem {
  id             Int            @id @default(autoincrement())
  lessonId       Int
  lesson         Lesson         @relation(fields: [lessonId], references: [id])
  itemType       LessonItemType
  content        String?
  fileRelationId Int[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model LessonProgress {
  id          Int                  @id @default(autoincrement())
  lessonId    Int
  lesson      Lesson               @relation(fields: [lessonId], references: [id])
  userId      Int
  user        User                 @relation(fields: [userId], references: [id])
  status      LessonProgressStatus @default(IN_PROGRESS)
  completedAt DateTime?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

enum LessonProgressStatus {
  IN_PROGRESS
  COMPLETED
}

model Enrollment {
  id        Int              @id @default(autoincrement())
  courseId  Int
  course    Course           @relation(fields: [courseId], references: [id])
  userId    Int
  user      User             @relation(fields: [userId], references: [id])
  status    EnrollmentStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum EnrollmentStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

model CourseMember {
  id        Int              @id @default(autoincrement())
  courseId  Int
  course    Course           @relation(fields: [courseId], references: [id])
  userId    Int
  user      User             @relation(fields: [userId], references: [id])
  role      CourseMemberRole
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum CourseMemberRole {
  ADMIN
  MINISTRY
  TEACHER
  STUDENT
}

model LessonExercise {
  id                 Int                  @id @default(autoincrement())
  lessonId           Int
  lesson             Lesson               @relation(fields: [lessonId], references: [id])
  type               ExerciseType
  title              String
  description        String?
  fileRelationId     Int[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ExerciseSubmission ExerciseSubmission[]
  StudentAnswer      StudentAnswer[]
}

enum ExerciseType {
  MCQ
  ESSAY
}

model ExerciseSubmission {
  id              Int            @id @default(autoincrement())
  exerciseId      Int
  exercise        LessonExercise @relation(fields: [exerciseId], references: [id])
  studentAnswerId Int
  studentAnswer   StudentAnswer  @relation(fields: [studentAnswerId], references: [id])
  status          ExerciseStatus @default(DRAFT)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

enum ExerciseStatus {
  DRAFT
  SUBMITTED
}

model StudentAnswer {
  id                 Int                  @id @default(autoincrement())
  exerciseId         Int
  exercise           LessonExercise       @relation(fields: [exerciseId], references: [id])
  userId             Int
  user               User                 @relation(fields: [userId], references: [id])
  status             ExerciseStatus       @default(DRAFT)
  mcqAnswers         String[]
  essayAnswer        String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ExerciseSubmission ExerciseSubmission[]
}
