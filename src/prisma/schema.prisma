generator client {
  provider = "prisma-client-js"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum ERole {
  ADMIN
  USER
  MINISTRY
  TEACHER
}

enum EGender {
  MALE
  FEMALE
  OTHER
}

enum FileItemType {
  ARTICLE
  COURSE
  LESSON
  LESSON_EXERCISE
  TEST
  HOMEWORK
  HOMEWORK_ANSWER
}

enum CourseStatus {
  PUBLIC
  PRIVATE
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
}

enum ArticlesType {
  KNOWLEDGE
  FAQ
  BULLETIN
}

enum EnrollmentStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

enum ActivityType {
  QUIZ
  ASSIGNMENT
  DISCUSSION
  MATERIAL
}

enum ActivityStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
}

enum LessonStatus {
  DRAFT
  PUBLISHED
}

/// Trạng thái chấm điểm của một lượt làm Activity
enum GradingStatus {
  IN_PROGRESS
  PENDING_AUTO
  PENDING_MANUAL
  GRADED
}

enum ExerciseType {
  MCQ
  ESSAY
}

enum CourseMemberRole {
  ADMIN
  MINISTRY
  TEACHER
  STUDENT
}

enum ActivityQuestionType {
  MULTIPLE_CHOICE
  ESSAY
  FILE_UPLOAD
}

enum NotificationType {
  COURSE_ENROLLMENT
  COURSE_UPDATE
  LESSON_PUBLISHED
  ASSIGNMENT_DUE
  GRADE_RELEASED
  SYSTEM_ANNOUNCEMENT
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

enum NotificationSendStatus {
  PENDING
  SENT
  FAILED
}

/// -----USER-----
model User {
  id                 Int       @id @default(autoincrement())
  firstName          String    @db.VarChar(50)
  lastName           String?   @db.VarChar(50)
  gender             EGender?
  dateOfBirth        DateTime?
  avatarImageFileId  String?
  avatarImageFileUrl String?
  phoneNumber        String?   @db.VarChar(15)
  roles              ERole[]   @default([USER])

  userLogin           UserLogin?
  sessions            UserSession[]
  articles            Articles[]
  uploadedFiles       File[]
  teachingAssignments CourseTeacher[]           @relation("TeachingStaff") /// Các khóa học được phân công dạy
  lessonCompletions   LessonCompletion[]        @relation("UserLessonProgress") /// Tiến trình hoàn thành bài học
  activityAttempts    ActivityAttempt[]         @relation("UserAttempts") /// Các lượt làm hoạt động (quiz/assignment)
  createdActivities   Activity[]                @relation("CreatedActivities") /// Các hoạt động đã tạo
  gradedAttempts      ActivityAttempt[]         @relation("GradedAttempts") /// Các lượt làm bài đã chấm
  enrollmentsCourse   StudentCourseEnrollment[] @relation("EnrolledUser") /// Khóa học học viên đăng ký
  devices             UserDevice[]
  notifications       Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserLogin {
  userId               Int       @id
  user                 User      @relation(fields: [userId], references: [id])
  username             String?
  email                String    @db.VarChar(255)
  isEmailVerified      Boolean   @default(false)
  emailVerifyToken     String?
  emailVerifyTokenAt   DateTime?
  password             String
  passwordResetToken   String?
  passwordResetTokenAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSession {
  id           String   @id @default(uuid())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  refreshToken String
  expiredAt    DateTime
  userAgent    String?
  userIp       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// -----CATEGORIES-----
model Categories {
  id               Int               @id @default(autoincrement())
  name             String
  slug             String            @unique()
  description      String?
  imageUrl         String?
  parentId         Int?
  parentCategory   Categories?       @relation("CategoriesToCategories", fields: [parentId], references: [id])
  subCategories    Categories[]      @relation("CategoriesToCategories")
  articles         Articles[]
  courses          Course[]
  libraryMaterials LibraryMaterial[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

/// -----ARTICLES-----
model Articles {
  id           Int           @id @default(autoincrement())
  title        String
  content      String        @db.Text // Change to Text type for rich text content
  categoryId   Int?
  category     Categories?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  type         ArticlesType  @default(BULLETIN)
  status       ArticleStatus @default(DRAFT)
  likeCount    Int           @default(0)
  viewCount    Int           @default(0)
  thumbnailUrl String? // Add thumbnail URL field
  updatedAt    DateTime      @updatedAt
  createdAt    DateTime      @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  images ArticleImage[] // Add relation to ArticleImage
}

/// Model for article images
model ArticleImage {
  id        Int      @id @default(autoincrement())
  articleId Int
  article   Articles @relation(fields: [articleId], references: [id], onDelete: Cascade)
  fileId    Int
  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  order     Int      @default(0) // For ordering images in the article

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

///-----FILE-MANAGEMENT-----
model File {
  id          Int      @id @default(autoincrement())
  fileName    String
  description String?
  storagePath String
  mimeType    String
  size        Int
  uploadedBy  Int
  uploader    User     @relation(fields: [uploadedBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lessonAttachments LessonAttachment[]
  activityMaterials ActivityMaterial[] /// Tài liệu cho Activity
  studentAnswerFile StudentAnswer?     @relation("StudentAnswerFile") /// File nộp bài của học viên (qua StudentAnswer)
  articleImages     ArticleImage[] /// Images used in articles
  libraryMaterialId Int?
  libraryMaterial   LibraryMaterial?   @relation("LibraryMaterialFiles", fields: [libraryMaterialId], references: [id])
}

/// Model Tài liệu Thư viện
model LibraryMaterial {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  tags        String[]

  files         File[]               @relation("LibraryMaterialFiles")
  categoryId    Int?
  category      Categories?          @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  usedInCourses CourseLibraryUsage[] /// Khóa học sử dụng
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
}

/// Bảng trung gian Course <-> LibraryMaterial
model CourseLibraryUsage {
  courseId          Int
  Course            Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  libraryMaterialId Int
  LibraryMaterial   LibraryMaterial @relation(fields: [libraryMaterialId], references: [id], onDelete: Cascade)

  addedAt        DateTime @default(now())
  displayOrder   Int?
  contextualNote String?
  isVisible      Boolean  @default(true)

  @@id([courseId, libraryMaterialId])
  @@index([libraryMaterialId])
}

model LessonAttachment {
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  fileId    Int
  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([lessonId, fileId])
  @@index([fileId])
}

/// Bảng trung gian Activity <-> File (Tài liệu cho hoạt động)
model ActivityMaterial {
  activityId Int
  Activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  fileId     Int
  File       File     @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@id([activityId, fileId])
  @@index([fileId])
}

/// -----COURSE-----
model Course {
  id              Int          @id @default(autoincrement())
  name            String
  slug            String?      @unique
  description     String?
  imageFileUrl    String?
  bannerFileUrl   String?
  categoryId      Int?
  category        Categories?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  status          CourseStatus @default(PUBLIC)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  requireApproval Boolean      @default(false)

  /// Nội dung khóa học
  lessons              Lesson[] /// Bài học
  activities           Activity[]           @relation("CourseActivities") /// Hoạt động (quiz/assignment) cấp khóa học
  libraryMaterialsUsed CourseLibraryUsage[] /// Tài liệu thư viện sử dụng

  /// Quản lý & người dùng
  teachers            CourseTeacher[] /// Giáo viên
  enrollments         StudentCourseEnrollment[] /// Học viên đăng ký
  courseNotifications Notification[]
}

model Lesson {
  id          Int          @id @default(autoincrement())
  title       String
  content     String
  isImportant Boolean      @default(false)
  status      LessonStatus @default(DRAFT)
  courseId    Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  previousId  Int?         @unique

  previous Lesson? @relation(fields: [previousId], references: [id], name: "LessonToLesson")
  next     Lesson? @relation("LessonToLesson")
  course   Course  @relation(fields: [courseId], references: [id])

  activities  Activity[]         @relation("LessonActivities")
  attachments LessonAttachment[]
  completions LessonCompletion[]
}

/// --- ASSESSMENT / ACTIVITY ---

model Activity {
  id               Int            @id @default(autoincrement())
  title            String
  description      String?
  type             ActivityType
  status           ActivityStatus @default(DRAFT)
  timeLimitMinutes Int?
  dueDate          DateTime?
  maxAttempts      Int?
  passScore        Float?
  shuffleQuestions Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  creatorId        Int
  courseId         Int?
  lessonId         Int?

  // Relations
  creator   User               @relation("CreatedActivities", fields: [creatorId], references: [id])
  course    Course?            @relation("CourseActivities", fields: [courseId], references: [id])
  lesson    Lesson?            @relation("LessonActivities", fields: [lessonId], references: [id])
  questions ActivityQuestion[]
  attempts  ActivityAttempt[]
  materials ActivityMaterial[]

  @@index([creatorId])
  @@index([courseId])
  @@index([lessonId])
}

model ActivityQuestion {
  id            Int          @id @default(autoincrement())
  question      String
  type          QuestionType
  points        Float        @default(1)
  correctAnswer String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  activityId    Int

  // Relations
  activity Activity         @relation(fields: [activityId], references: [id], onDelete: Cascade)
  options  QuestionOption[]
  answers  StudentAnswer[]

  @@index([activityId])
}

model QuestionOption {
  id         Int     @id @default(autoincrement())
  text       String
  isCorrect  Boolean @default(false)
  questionId Int

  // Relations
  question ActivityQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers  StudentAnswer[]

  @@index([questionId])
}

model ActivityAttempt {
  id            Int      @id @default(autoincrement())
  activityId    Int
  Activity      Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  studentId     Int
  student       User     @relation("UserAttempts", fields: [studentId], references: [id], onDelete: Cascade)
  attemptNumber Int      @default(1)

  startedAt      DateTime      @default(now())
  completedAt    DateTime?
  score          Float?
  gradingStatus  GradingStatus @default(IN_PROGRESS)
  graderId       Int?
  grader         User?         @relation("GradedAttempts", fields: [graderId], references: [id], onDelete: SetNull)
  gradedAt       DateTime?
  graderFeedback String?

  answers StudentAnswer[]

  @@unique([activityId, studentId, attemptNumber])
  @@index([activityId])
  @@index([studentId])
  @@index([graderId])
  @@index([gradingStatus])
}

model StudentAnswer {
  id                 Int              @id @default(autoincrement())
  activityAttemptId  Int
  ActivityAttempt    ActivityAttempt  @relation(fields: [activityAttemptId], references: [id], onDelete: Cascade)
  activityQuestionId Int
  Question           ActivityQuestion @relation(fields: [activityQuestionId], references: [id], onDelete: Cascade)
  selectedOptionId   Int?
  SelectedOption     QuestionOption?  @relation(fields: [selectedOptionId], references: [id], onDelete: SetNull)
  essayAnswer        String?
  fileId             Int?             @unique()
  file               File?            @relation(fields: [fileId], references: [id], "StudentAnswerFile")

  isCorrect Boolean?
  score     Float?
  feedback  String?

  @@unique([activityAttemptId, activityQuestionId])
  @@index([activityAttemptId])
  @@index([activityQuestionId])
  @@index([selectedOptionId])
  @@index([fileId])
}

/// --- RBAC / CONTEXT LINKS ---

/// Bảng trung gian Phân công Giáo viên dạy Khóa học
model CourseTeacher {
  courseId  Int
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  teacherId Int /// userId của người dạy
  teacher   User   @relation("TeachingStaff", fields: [teacherId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())

  @@id([courseId, teacherId])
  @@index([teacherId])
}

/// --- PROGRESS TRACKING ---
/// Bảng Ghi danh và Tiến trình tổng thể của Khóa học
model StudentCourseEnrollment {
  userId   Int /// userId của người học
  user     User   @relation("EnrolledUser", fields: [userId], references: [id], onDelete: Cascade)
  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  enrolledAt         DateTime         @default(now())
  status             EnrollmentStatus @default(PENDING) /// Trạng thái
  completedAt        DateTime? /// Ngày hoàn thành
  progressPercentage Float?           @default(0) /// % Hoàn thành
  lastAccessedAt     DateTime? /// Lần truy cập cuối

  @@id([userId, courseId])
  @@index([courseId])
}

model LessonCompletion {
  userId   Int /// userId của người học
  user     User   @relation("UserLessonProgress", fields: [userId], references: [id], onDelete: Cascade)
  lessonId Int
  Lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  isCompleted    Boolean   @default(false) /// Đã hoàn thành?
  completedAt    DateTime? /// Ngày hoàn thành
  lastAccessedAt DateTime? /// Lần truy cập cuối

  @@id([userId, lessonId])
  @@index([lessonId])
}

model UserDevice {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  fcmToken  String   @unique
  deviceId  String?
  platform  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Notification {
  id         Int                    @id @default(autoincrement())
  userId     Int
  user       User                   @relation(fields: [userId], references: [id])
  type       NotificationType
  title      String
  message    String
  data       Json?
  status     NotificationStatus     @default(UNREAD)
  sendStatus NotificationSendStatus @default(PENDING)
  sentAt     DateTime?
  sendError  String?
  retryCount Int                    @default(0)
  courseId   Int?
  course     Course?                @relation(fields: [courseId], references: [id])
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([sendStatus])
}
